;---------------------------------------;
; Simulate spread of disease            ;
;---------------------------------------;
; Compile with                          ;
;                                       ;
; uasm -win64 diseases_spread.asm       ;
; ld diseases_spread.o                  ;
;---------------------------------------;
; Sa 14. Jan 21:19:47 CET 2023          ;
;---------------------------------------;
;=======================================;
; Macros                                ;
;=======================================;
;---------------------------------------;
; @@@@@@@                               ;
; RawPrint                              ;
;---------------------------------------;
RawPrint MACRO ptr, len                 ;
    MOV rax, 4                          ;
    MOV rbx, 1                          ;
    MOV rcx, ptr                        ;
    MOV rdx, len                        ;
    INT 80H                             ;
ENDM                                    ;
                                        ;
    ITERATIONS EQU 50                   ;
;---------------------------------------;
BSS SEGMENT                             ;
    genSick DD 0.01                     ;
    coeff DD 0.1                        ;
    percentConvert DD 100               ;
    percentBuff DD ?                    ;
BSS ENDS                                ;
                                        ;
;---------------------------------------;
DATA SEGMENT                            ;
    ;- control sequences for changing the colors of graphs
    newL DB 0AH                         ;
    newLLen EQU 1                       ;
    ;                                   ;
    greenText DB 1BH, "[4;32;1m"        ;
    greenTextLen EQU $ - greenText      ;
    ;                                   ;
    redText DB 1BH, "[31;1m"            ;
    redtextLen EQU $ - redText          ;
    ;                                   ;
    blockChar DB 023H                   ;
    blockCharLen EQU 1                  ;
    ;-                                  ;
    emptyEff DB 1BH, "[0m"              ;
    emptyEffLen EQU $ - emptyEff        ;
    ;- Different texts to print out     ;
    greeter DB "Simulate the spread of a disease - Displayed in a graphical format", 0AH, "2023, Maximilian Wittmer", 0AH
    greeterLen EQU $ - greeter          ;
DATA ENDS                               ;
                                        ;
;---------------------------------------;
TEXT SEGMENT                            ;
;---------------------------------------;
; _start                                ;
;---------------------------------------;
PUBLIC _start                           ;
_start PROC                             ;
    ;- prints the greeter               ;
    RawPrint OFFSET greeter, greeterLen ;
    RawPrint OFFSET newL, newLLen       ;
    RawPrint OFFSET newL, newLLen       ;
    RawPrint OFFSET newL, newLLen       ;
    ;- print amount of sick people      ;
    MOV rcx, ITERATIONS                 ;
@@a:                                    ;
    PUSH rcx                            ;
    CALL printGraph                     ;
    ;-- calculate the next gen          ;
    CALL calcGen                        ;
    ;-- loop                            ;
    POP rcx                             ;
    LOOP @@a                            ;
    ;- next generation                  ;
    ;- exit execution                   ;
    ;-- Print newline                   ;
    RawPrint OFFSET newL, newLLen       ;
    RawPrint OFFSET emptyEff, emptyEffLen       ;
    ;-- syscal exit                     ;
    MOV rax, 1                          ;
    XOR rbx, rbx                        ;
    INT 80H                             ;
_start ENDP                             ;
                                        ;
                                        ;
;---------------------------------------;
; calcGen                               ;
;---------------------------------------;
calcGen PROC                            ;
    ENTER 0, 0                          ;
    ;-                                  ;
    FLD DWORD PTR [genSick]             ;
    FLD1                                ;
    FLD DWORD PTR [genSick]             ;
    FSUBP                               ; (1 - p)
    FMULP                               ; p * (1 - p)
    FMUL DWORD PTR [coeff]              ; k * p * (1 - p)
    FLD DWORD PTR [genSick]             ;
    FADDP                               ; p_(t+1) + k * p * (1 - p)
    FSTP DWORD PTR [genSick]            ;
    ;-                                  ;
    LEAVE                               ;
    RET                                 ;
calcGen ENDP                            ;
                                        ;
;---------------------------------------;
; Print graph                           ;
;---------------------------------------;
printGraph PROC                         ;
    ;- convert percentages to real number
    FLD DWORD PTR [genSick]             ;
    FIMUL DWORD PTR [percentConvert]    ; percentage * 100 - convert to real number
    FISTP DWORD PTR [percentBuff]       ;
    ;- print the sick patients first ;
    ;-- Select Color                    ;
    RawPrint OFFSET redText, redTextLen ;
    ;-- Print the blocks                ;
    XOR rcx, rcx                        ;
    MOV ecx, DWORD PTR [percentBuff]    ;
    CALL printBlocks                    ;
    ;- Now healtyh patients             ;
    ;-- Select color                    ;
    RawPrint OFFSET greenText, greenTextLen ;
    ;-- Calculate amount                ;
    XOR rcx, rcx                        ;
    MOV cx, 100                         ;
    MOV eax, DWORD PTR [percentBuff]    ;
    SUB cx, ax                          ;
    ;-- print out                       ;
    CALL printBlocks                    ;
    ;- New line                         ;
    RawPrint OFFSET newL, newLLen       ;
    ;-                                  ;
    RET                                 ;
printGraph ENDP                         ;
                                        ;
;---------------------------------------;
; printBlocks                           ;
;---------------------------------------;
; RCX = amount of loops                 ;
;---------------------------------------;
printBlocks PROC                        ;
    ;- error detection                  ;
    ;-- if zero, skip                   ; LOOP with rcx = 0 will underflow and loop a ton of times
    OR rcx, rcx                         ;
    JZ @@x                              ;
    ;-- If more than 100, reset to 100  ;
    CMP rcx, 100                        ;
    JLE @@loop                          ;
    MOV rcx, 100                        ;
    ;- Loop as many times as required and print
@@loop:                                 ;
    PUSH rcx                            ;
    RawPrint OFFSET blockChar, blockCharLen; invalidates RCX
    POP rcx                             ;
    LOOP @@loop                         ;
    ;-                                  ;
@@x:                                    ;
    RET                                 ;
printBlocks ENDP                        ;
                                        ;
;---------------------------------------;
TEXT ENDS                               ;
END                                     ;
